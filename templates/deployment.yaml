apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "redis.name" . }}
  namespace: {{ $.Release.Namespace }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
spec:
  replicas: 1
  podManagementPolicy: OrderedReady
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 8 }}
  template:
    metadata:
      labels: {{ include "common.labels.standard" . | nindent 8 }}
    spec:
      {{- include "redis.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      containers:
      - command:
        - redis-server
        - /etc/redis.conf
        image: {{ include "redis.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        name: redis
        ports:
        - containerPort: {{ .Values.service.ports.redis }}
          name: redis
          protocol: TCP
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.livenessProbe "enabled") "context" $) | nindent 10 }}
          exec:
            command:
            - /bin/bash
            - -ec
            - |
              redis-cli -p "${PORT}" -a "${PASS}" ping 2> /dev/null | grep PONG
        {{- end}}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.readinessProbe "enabled") "context" $) | nindent 10 }}
          exec:
            command:
            - /bin/bash
            - -ec
            - |
              redis-cli -p "${PORT}" -a "${PASS}" ping 2> /dev/null | grep PONG
        {{- end}}
        {{- if .Values.startupProbe.enabled }}
        startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.startupProbe "enabled") "context" $) | nindent 10 }}
          exec:
            command:
            - /bin/bash
            - -ec
            - |
              redis-cli -p "${PORT}" -a "${PASS}" ping 2> /dev/null | grep PONG
        {{- end}}
        env:
        - name: PASS
          valueFrom:
            secretKeyRef:
              name: {{ include "redis.name" . }}
              key: PASS
        volumeMounts:
        - mountPath: /etc/redis.conf
          name: config
          subPath: redis.conf
        resources: 
          {{- toYaml .Values.resources | nindent 12 }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: {{ include "redis.name" . }}-config
        name: config